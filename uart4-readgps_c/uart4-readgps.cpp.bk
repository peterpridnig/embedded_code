#include<stdio.h>
#include<fcntl.h>
#include<unistd.h>
#include<termios.h>
#include<string.h>
#include<stdlib.h>

#include<iostream>
using namespace std;

#include"minmea.h"


int main(int argc, char *argv[]){
  int client, count=0;
  unsigned char c;

  char line [MINMEA_MAX_SENTENCE_LENGTH];

  if ((client = open("/dev/ttyS4", O_RDWR | O_NOCTTY | O_NDELAY))<0){
    perror("UART: Failed to open the file.\n");
    return -1;
  }
  struct termios options;
  tcgetattr(client, &options);
  options.c_cflag = B9600 | CS8 | CREAD | CLOCAL;
  options.c_iflag = IGNPAR | ICRNL;
  tcflush(client, TCIFLUSH);
  //fcntl(STDIN_FILENO, F_SETFL, O_NONBLOCK);  // make reads non-blocking
  tcsetattr(client, TCSANOW, &options);
  //   if (message(client, "\n\rEBB Serial Server running")<0){
  //      perror("UART: Failed to start server.\n");
  //      return -1;
  //   }
  
  //$GPRMC,021624.799,V,,,,,0.00,0.00,060180,,,N*46
  
  // Loop forever until the quit line is sent from the client or
  //  Ctrl-C is pressed in the server's terminal window
  do {
    if(read(client,&c,100)>0){
      line[count++]=c;

      if(c=='\n'){ //EOL
	//line[count-2]='\n';  // replace /n with /0
	count=0;                // reset the line string
	//printf("\n");

	cout << endl << "line=" << line <<endl;
	cout << "endline. Starting Parser:" << endl;
	
	switch (minmea_sentence_id(line, false)) {
        case MINMEA_SENTENCE_RMC: {
	  struct minmea_sentence_rmc frame;
	  if (minmea_parse_rmc(&frame, line)) {
	    printf("$RMC: raw coordinates and speed: (%d/%d,%d/%d) %d/%d\n",
		   frame.latitude.value, frame.latitude.scale,
		   frame.longitude.value, frame.longitude.scale,
		   frame.speed.value, frame.speed.scale);
	    printf("$RMC fixed-point coordinates and speed scaled to three decimal places: (%d,%d) %d\n",
		   minmea_rescale(&frame.latitude, 1000),
		   minmea_rescale(&frame.longitude, 1000),
		   minmea_rescale(&frame.speed, 1000));
	    printf("$RMC floating point degree coordinates and speed: (%f,%f) %f\n",
		   minmea_tocoord(&frame.latitude),
		   minmea_tocoord(&frame.longitude),
		   minmea_tofloat(&frame.speed));
	  }
        } break;

        case MINMEA_SENTENCE_GGA: {
	  struct minmea_sentence_gga frame;
	  if (minmea_parse_gga(&frame, line)) {
	    printf("$GGA: fix quality: %d\n", frame.fix_quality);
	  }
        } break;

	case MINMEA_INVALID: {cout << "Invalid" << endl; } break;
	case MINMEA_UNKNOWN: {cout << "Unknown" << endl; } break;
	  
        case MINMEA_SENTENCE_GSV: {
	  struct minmea_sentence_gsv frame;
	  if (minmea_parse_gsv(&frame, line)) {
	    printf("$GSV: message %d of %d\n", frame.msg_nr, frame.total_msgs);
	    printf("$GSV: satellites in view: %d\n", frame.total_sats);
	    for (int i = 0; i < 4; i++)
	      printf("$GSV: sat nr %d, elevation: %d, azimuth: %d, snr: %d dbm\n",
		     frame.sats[i].nr,
		     frame.sats[i].elevation,
		     frame.sats[i].azimuth,
		     frame.sats[i].snr);
	  }
        } break;
	}
	cout << "End Parser" << endl;
	 
      } else {
	//write(STDOUT_FILENO,&c,1);
	cout << "a" ;
      }
       
    }
  }
  while(strcmp(line,"quit")!=0);
  close(client);
  return 0;
}
